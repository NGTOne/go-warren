// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/NGTOne/warren/conn/amqp_0_9_1 (interfaces: AMQPConn)

// Package amqp_0_9_1_test is a generated GoMock package.
package amqp_0_9_1_test

import (
	amqp_0_9_1 "github.com/NGTOne/warren/conn/amqp_0_9_1"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAMQPConn is a mock of AMQPConn interface
type MockAMQPConn struct {
	ctrl     *gomock.Controller
	recorder *MockAMQPConnMockRecorder
}

// MockAMQPConnMockRecorder is the mock recorder for MockAMQPConn
type MockAMQPConnMockRecorder struct {
	mock *MockAMQPConn
}

// NewMockAMQPConn creates a new mock instance
func NewMockAMQPConn(ctrl *gomock.Controller) *MockAMQPConn {
	mock := &MockAMQPConn{ctrl: ctrl}
	mock.recorder = &MockAMQPConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAMQPConn) EXPECT() *MockAMQPConnMockRecorder {
	return m.recorder
}

// Channel mocks base method
func (m *MockAMQPConn) Channel() (amqp_0_9_1.AMQPChan, error) {
	ret := m.ctrl.Call(m, "Channel")
	ret0, _ := ret[0].(amqp_0_9_1.AMQPChan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Channel indicates an expected call of Channel
func (mr *MockAMQPConnMockRecorder) Channel() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Channel", reflect.TypeOf((*MockAMQPConn)(nil).Channel))
}

// Close mocks base method
func (m *MockAMQPConn) Close() {
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockAMQPConnMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockAMQPConn)(nil).Close))
}
