// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/NGTOne/warren/conn/amqp_0_9_1 (interfaces: AMQPChan)

// Package amqp_0_9_1_test is a generated GoMock package.
package amqp_0_9_1_test

import (
	gomock "github.com/golang/mock/gomock"
	amqp "github.com/streadway/amqp"
	reflect "reflect"
)

// MockAMQPChan is a mock of AMQPChan interface
type MockAMQPChan struct {
	ctrl     *gomock.Controller
	recorder *MockAMQPChanMockRecorder
}

// MockAMQPChanMockRecorder is the mock recorder for MockAMQPChan
type MockAMQPChanMockRecorder struct {
	mock *MockAMQPChan
}

// NewMockAMQPChan creates a new mock instance
func NewMockAMQPChan(ctrl *gomock.Controller) *MockAMQPChan {
	mock := &MockAMQPChan{ctrl: ctrl}
	mock.recorder = &MockAMQPChanMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAMQPChan) EXPECT() *MockAMQPChanMockRecorder {
	return m.recorder
}

// Ack mocks base method
func (m *MockAMQPChan) Ack(arg0 uint64, arg1 bool) error {
	ret := m.ctrl.Call(m, "Ack", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ack indicates an expected call of Ack
func (mr *MockAMQPChanMockRecorder) Ack(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ack", reflect.TypeOf((*MockAMQPChan)(nil).Ack), arg0, arg1)
}

// Close mocks base method
func (m *MockAMQPChan) Close() {
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockAMQPChanMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockAMQPChan)(nil).Close))
}

// Consume mocks base method
func (m *MockAMQPChan) Consume(arg0, arg1 string, arg2, arg3, arg4, arg5 bool, arg6 amqp.Table) (<-chan amqp.Delivery, error) {
	ret := m.ctrl.Call(m, "Consume", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(<-chan amqp.Delivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Consume indicates an expected call of Consume
func (mr *MockAMQPChanMockRecorder) Consume(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockAMQPChan)(nil).Consume), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// ExchangeDeclare mocks base method
func (m *MockAMQPChan) ExchangeDeclare(arg0, arg1 string, arg2, arg3, arg4, arg5 bool, arg6 amqp.Table) error {
	ret := m.ctrl.Call(m, "ExchangeDeclare", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExchangeDeclare indicates an expected call of ExchangeDeclare
func (mr *MockAMQPChanMockRecorder) ExchangeDeclare(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangeDeclare", reflect.TypeOf((*MockAMQPChan)(nil).ExchangeDeclare), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// Nack mocks base method
func (m *MockAMQPChan) Nack(arg0 uint64, arg1, arg2 bool) error {
	ret := m.ctrl.Call(m, "Nack", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Nack indicates an expected call of Nack
func (mr *MockAMQPChanMockRecorder) Nack(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nack", reflect.TypeOf((*MockAMQPChan)(nil).Nack), arg0, arg1, arg2)
}

// Publish mocks base method
func (m *MockAMQPChan) Publish(arg0, arg1 string, arg2, arg3 bool, arg4 amqp.Publishing) error {
	ret := m.ctrl.Call(m, "Publish", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish
func (mr *MockAMQPChanMockRecorder) Publish(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockAMQPChan)(nil).Publish), arg0, arg1, arg2, arg3, arg4)
}

// Qos mocks base method
func (m *MockAMQPChan) Qos(arg0, arg1 int, arg2 bool) error {
	ret := m.ctrl.Call(m, "Qos", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Qos indicates an expected call of Qos
func (mr *MockAMQPChanMockRecorder) Qos(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Qos", reflect.TypeOf((*MockAMQPChan)(nil).Qos), arg0, arg1, arg2)
}

// QueueBind mocks base method
func (m *MockAMQPChan) QueueBind(arg0, arg1, arg2 string, arg3 bool, arg4 amqp.Table) error {
	ret := m.ctrl.Call(m, "QueueBind", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueBind indicates an expected call of QueueBind
func (mr *MockAMQPChanMockRecorder) QueueBind(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueBind", reflect.TypeOf((*MockAMQPChan)(nil).QueueBind), arg0, arg1, arg2, arg3, arg4)
}

// QueueDeclare mocks base method
func (m *MockAMQPChan) QueueDeclare(arg0 string, arg1, arg2, arg3, arg4 bool, arg5 amqp.Table) (amqp.Queue, error) {
	ret := m.ctrl.Call(m, "QueueDeclare", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(amqp.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueDeclare indicates an expected call of QueueDeclare
func (mr *MockAMQPChanMockRecorder) QueueDeclare(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueDeclare", reflect.TypeOf((*MockAMQPChan)(nil).QueueDeclare), arg0, arg1, arg2, arg3, arg4, arg5)
}
