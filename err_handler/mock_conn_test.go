// Code generated by MockGen. DO NOT EDIT.
// Source: conn/connection.go

// Package mock_conn is a generated GoMock package.
package err_handler_test

import (
	conn "github.com/NGTOne/warren/conn"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMessage is a mock of Message interface
type MockMessage struct {
	ctrl     *gomock.Controller
	recorder *MockMessageMockRecorder
}

// MockMessageMockRecorder is the mock recorder for MockMessage
type MockMessageMockRecorder struct {
	mock *MockMessage
}

// NewMockMessage creates a new mock instance
func NewMockMessage(ctrl *gomock.Controller) *MockMessage {
	mock := &MockMessage{ctrl: ctrl}
	mock.recorder = &MockMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMessage) EXPECT() *MockMessageMockRecorder {
	return m.recorder
}

// GetAllHeaders mocks base method
func (m *MockMessage) GetAllHeaders() map[string]interface{} {
	ret := m.ctrl.Call(m, "GetAllHeaders")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// GetAllHeaders indicates an expected call of GetAllHeaders
func (mr *MockMessageMockRecorder) GetAllHeaders() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllHeaders", reflect.TypeOf((*MockMessage)(nil).GetAllHeaders))
}

// GetHeaderValue mocks base method
func (m *MockMessage) GetHeaderValue(headerName string) (interface{}, error) {
	ret := m.ctrl.Call(m, "GetHeaderValue", headerName)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeaderValue indicates an expected call of GetHeaderValue
func (mr *MockMessageMockRecorder) GetHeaderValue(headerName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeaderValue", reflect.TypeOf((*MockMessage)(nil).GetHeaderValue), headerName)
}

// GetBody mocks base method
func (m *MockMessage) GetBody() []byte {
	ret := m.ctrl.Call(m, "GetBody")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetBody indicates an expected call of GetBody
func (mr *MockMessageMockRecorder) GetBody() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBody", reflect.TypeOf((*MockMessage)(nil).GetBody))
}

// MockConnection is a mock of Connection interface
type MockConnection struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionMockRecorder
}

// MockConnectionMockRecorder is the mock recorder for MockConnection
type MockConnectionMockRecorder struct {
	mock *MockConnection
}

// NewMockConnection creates a new mock instance
func NewMockConnection(ctrl *gomock.Controller) *MockConnection {
	mock := &MockConnection{ctrl: ctrl}
	mock.recorder = &MockConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConnection) EXPECT() *MockConnectionMockRecorder {
	return m.recorder
}

// Listen mocks base method
func (m *MockConnection) Listen(f func(conn.Message)) error {
	ret := m.ctrl.Call(m, "Listen", f)
	ret0, _ := ret[0].(error)
	return ret0
}

// Listen indicates an expected call of Listen
func (mr *MockConnectionMockRecorder) Listen(f interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listen", reflect.TypeOf((*MockConnection)(nil).Listen), f)
}

// AckMsg mocks base method
func (m_2 *MockConnection) AckMsg(m conn.Message) error {
	ret := m_2.ctrl.Call(m_2, "AckMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// AckMsg indicates an expected call of AckMsg
func (mr *MockConnectionMockRecorder) AckMsg(m interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AckMsg", reflect.TypeOf((*MockConnection)(nil).AckMsg), m)
}

// NackMsg mocks base method
func (m_2 *MockConnection) NackMsg(m conn.Message) error {
	ret := m_2.ctrl.Call(m_2, "NackMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// NackMsg indicates an expected call of NackMsg
func (mr *MockConnectionMockRecorder) NackMsg(m interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NackMsg", reflect.TypeOf((*MockConnection)(nil).NackMsg), m)
}

// SendResponse mocks base method
func (m *MockConnection) SendResponse(original, response conn.Message) error {
	ret := m.ctrl.Call(m, "SendResponse", original, response)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendResponse indicates an expected call of SendResponse
func (mr *MockConnectionMockRecorder) SendResponse(original, response interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendResponse", reflect.TypeOf((*MockConnection)(nil).SendResponse), original, response)
}

// Disconnect mocks base method
func (m *MockConnection) Disconnect() {
	m.ctrl.Call(m, "Disconnect")
}

// Disconnect indicates an expected call of Disconnect
func (mr *MockConnectionMockRecorder) Disconnect() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockConnection)(nil).Disconnect))
}
