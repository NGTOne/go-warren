// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/NGTOne/warren/service (interfaces: AsynchronousAction)

// Package test_mocks is a generated GoMock package.
package test_mocks

import (
	conn "github.com/NGTOne/warren/conn"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAsynchronousAction is a mock of AsynchronousAction interface
type MockAsynchronousAction struct {
	ctrl     *gomock.Controller
	recorder *MockAsynchronousActionMockRecorder
}

// MockAsynchronousActionMockRecorder is the mock recorder for MockAsynchronousAction
type MockAsynchronousActionMockRecorder struct {
	mock *MockAsynchronousAction
}

// NewMockAsynchronousAction creates a new mock instance
func NewMockAsynchronousAction(ctrl *gomock.Controller) *MockAsynchronousAction {
	mock := &MockAsynchronousAction{ctrl: ctrl}
	mock.recorder = &MockAsynchronousActionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAsynchronousAction) EXPECT() *MockAsynchronousActionMockRecorder {
	return m.recorder
}

// Process mocks base method
func (m *MockAsynchronousAction) Process(arg0 conn.Message) error {
	ret := m.ctrl.Call(m, "Process", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Process indicates an expected call of Process
func (mr *MockAsynchronousActionMockRecorder) Process(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockAsynchronousAction)(nil).Process), arg0)
}
