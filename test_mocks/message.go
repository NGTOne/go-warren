// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/NGTOne/warren/conn (interfaces: Message)

// Package test_mocks is a generated GoMock package.
package test_mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMessage is a mock of Message interface
type MockMessage struct {
	ctrl     *gomock.Controller
	recorder *MockMessageMockRecorder
}

// MockMessageMockRecorder is the mock recorder for MockMessage
type MockMessageMockRecorder struct {
	mock *MockMessage
}

// NewMockMessage creates a new mock instance
func NewMockMessage(ctrl *gomock.Controller) *MockMessage {
	mock := &MockMessage{ctrl: ctrl}
	mock.recorder = &MockMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMessage) EXPECT() *MockMessageMockRecorder {
	return m.recorder
}

// GetAllHeaders mocks base method
func (m *MockMessage) GetAllHeaders() map[string]string {
	ret := m.ctrl.Call(m, "GetAllHeaders")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetAllHeaders indicates an expected call of GetAllHeaders
func (mr *MockMessageMockRecorder) GetAllHeaders() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllHeaders", reflect.TypeOf((*MockMessage)(nil).GetAllHeaders))
}

// GetBody mocks base method
func (m *MockMessage) GetBody() []byte {
	ret := m.ctrl.Call(m, "GetBody")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetBody indicates an expected call of GetBody
func (mr *MockMessageMockRecorder) GetBody() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBody", reflect.TypeOf((*MockMessage)(nil).GetBody))
}

// GetHeaderValue mocks base method
func (m *MockMessage) GetHeaderValue(arg0 string) (string, error) {
	ret := m.ctrl.Call(m, "GetHeaderValue", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeaderValue indicates an expected call of GetHeaderValue
func (mr *MockMessageMockRecorder) GetHeaderValue(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeaderValue", reflect.TypeOf((*MockMessage)(nil).GetHeaderValue), arg0)
}
