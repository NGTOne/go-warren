// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/NGTOne/warren/service (interfaces: Connection)

// Package mocks is a generated GoMock package.
package test_mocks

import (
	service "github.com/NGTOne/warren/service"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockConnection is a mock of Connection interface
type MockConnection struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionMockRecorder
}

// MockConnectionMockRecorder is the mock recorder for MockConnection
type MockConnectionMockRecorder struct {
	mock *MockConnection
}

// NewMockConnection creates a new mock instance
func NewMockConnection(ctrl *gomock.Controller) *MockConnection {
	mock := &MockConnection{ctrl: ctrl}
	mock.recorder = &MockConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConnection) EXPECT() *MockConnectionMockRecorder {
	return m.recorder
}

// AckMessage mocks base method
func (m *MockConnection) AckMessage(arg0 service.Message) error {
	ret := m.ctrl.Call(m, "AckMessage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AckMessage indicates an expected call of AckMessage
func (mr *MockConnectionMockRecorder) AckMessage(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AckMessage", reflect.TypeOf((*MockConnection)(nil).AckMessage), arg0)
}

// Listen mocks base method
func (m *MockConnection) Listen() {
	m.ctrl.Call(m, "Listen")
}

// Listen indicates an expected call of Listen
func (mr *MockConnectionMockRecorder) Listen() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listen", reflect.TypeOf((*MockConnection)(nil).Listen))
}

// NackMessage mocks base method
func (m *MockConnection) NackMessage(arg0 service.Message) error {
	ret := m.ctrl.Call(m, "NackMessage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// NackMessage indicates an expected call of NackMessage
func (mr *MockConnectionMockRecorder) NackMessage(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NackMessage", reflect.TypeOf((*MockConnection)(nil).NackMessage), arg0)
}

// SendResponse mocks base method
func (m *MockConnection) SendResponse(arg0, arg1 service.Message) error {
	ret := m.ctrl.Call(m, "SendResponse", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendResponse indicates an expected call of SendResponse
func (mr *MockConnectionMockRecorder) SendResponse(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendResponse", reflect.TypeOf((*MockConnection)(nil).SendResponse), arg0, arg1)
}

// SetNewMessageCallback mocks base method
func (m *MockConnection) SetNewMessageCallback(arg0 func(service.Message)) {
	m.ctrl.Call(m, "SetNewMessageCallback", arg0)
}

// SetNewMessageCallback indicates an expected call of SetNewMessageCallback
func (mr *MockConnectionMockRecorder) SetNewMessageCallback(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNewMessageCallback", reflect.TypeOf((*MockConnection)(nil).SetNewMessageCallback), arg0)
}
