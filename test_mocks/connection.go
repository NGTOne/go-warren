// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/NGTOne/warren/conn (interfaces: Connection)

// Package test_mocks is a generated GoMock package.
package test_mocks

import (
	conn "github.com/NGTOne/warren/conn"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockConnection is a mock of Connection interface
type MockConnection struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionMockRecorder
}

// MockConnectionMockRecorder is the mock recorder for MockConnection
type MockConnectionMockRecorder struct {
	mock *MockConnection
}

// NewMockConnection creates a new mock instance
func NewMockConnection(ctrl *gomock.Controller) *MockConnection {
	mock := &MockConnection{ctrl: ctrl}
	mock.recorder = &MockConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConnection) EXPECT() *MockConnectionMockRecorder {
	return m.recorder
}

// AckMsg mocks base method
func (m *MockConnection) AckMsg(arg0 conn.Message) error {
	ret := m.ctrl.Call(m, "AckMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AckMsg indicates an expected call of AckMsg
func (mr *MockConnectionMockRecorder) AckMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AckMsg", reflect.TypeOf((*MockConnection)(nil).AckMsg), arg0)
}

// Disconnect mocks base method
func (m *MockConnection) Disconnect() {
	m.ctrl.Call(m, "Disconnect")
}

// Disconnect indicates an expected call of Disconnect
func (mr *MockConnectionMockRecorder) Disconnect() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockConnection)(nil).Disconnect))
}

// Listen mocks base method
func (m *MockConnection) Listen(arg0 func(conn.Message)) error {
	ret := m.ctrl.Call(m, "Listen", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Listen indicates an expected call of Listen
func (mr *MockConnectionMockRecorder) Listen(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listen", reflect.TypeOf((*MockConnection)(nil).Listen), arg0)
}

// NackMsg mocks base method
func (m *MockConnection) NackMsg(arg0 conn.Message) error {
	ret := m.ctrl.Call(m, "NackMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// NackMsg indicates an expected call of NackMsg
func (mr *MockConnectionMockRecorder) NackMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NackMsg", reflect.TypeOf((*MockConnection)(nil).NackMsg), arg0)
}

// SendResponse mocks base method
func (m *MockConnection) SendResponse(arg0, arg1 conn.Message) error {
	ret := m.ctrl.Call(m, "SendResponse", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendResponse indicates an expected call of SendResponse
func (mr *MockConnectionMockRecorder) SendResponse(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendResponse", reflect.TypeOf((*MockConnection)(nil).SendResponse), arg0, arg1)
}
